@page "/productprices"
@inject Services.ApiService apiService


<h1>Search Product</h1>


<TelerikNotification @ref="@Notification"
                     Class="demo-notification"
                     AnimationType="AnimationType.Fade"
                     AnimationDuration="600">
</TelerikNotification>

<EditForm Model="@productModel" OnValidSubmit="SearchProduct">

    <FormFieldSet Width="100">
        <label for="ProductName" class="font-weight-bold text-secondary">Product Name</label>
        <InputText @bind-Value="@productModel.ProductName" class="form-control" id="ProductName" />
    </FormFieldSet>

    <div class="form-group">
        <input type="submit" class="btn btn-dark" value="Search" />
    </div>
</EditForm>

<div class="dropdown-divider"></div>

<TelerikGrid Data=products Pageable=true PageSize=5 Height="60%">
    <GridColumns>
        <GridColumn Field="Name" />
        <GridColumn Field="Brand" />
        <GridColumn Field="Description" />
    </GridColumns>
</TelerikGrid>


@code {

    [Parameter]
    public int Id { get; set; }

    private SupermarketViewModel supermarket { get; set; }
    private List<ProductViewModel> products { get; set; }
    private SupermarketProductViewModel supermarketProduct { get; set; }
    public TelerikNotification Notification { get; set; }
    public ProductModel productModel { get; set; }


    protected override async Task OnInitializedAsync()
    {
        productModel = new ProductModel();
    }


    private async Task SearchProduct()
    {
        try
        {
            products = await apiService.GetProductsAsync(productModel.ProductName);

            if (products == null || products.Count == 0)
                Notification.Show(new NotificationModel()
                {
                    Text = "Product not Found.",
                    ThemeColor = ThemeColors.Warning,
                    CloseAfter = 3000
                });
        }
        catch
        {
            Notification.Show(new NotificationModel()
            {
                Text = "Error at the search",
                ThemeColor = ThemeColors.Error,
                CloseAfter = 3000
            });
        }
        //if (supermarket.Products.Where(x => x.ProductId.Equals(supermarketProduct.ProductId)).Any())
        //{
        //    Notification.Show(new NotificationModel()
        //    {
        //        Text = "Warning! Product already registred.",
        //        ThemeColor = ThemeColors.Warning,
        //        CloseAfter = 3000
        //    });

        //}
        //else
        //{
        //    supermarketProduct.SupermarketId = Id;
        //    supermarketProduct.Date = DateTime.Now;
        //    var retorno = await apiService.RegistrySupermarketProduct(supermarketProduct);
        //    supermarket = await apiService.GetSupermarketsAsync(Id);
        //    Notification.Show(new NotificationModel()
        //    {
        //        Text = "Product registered with success.",
        //        ThemeColor = ThemeColors.Success,
        //        CloseAfter = 3000
        //    });
        //}

    }

    public class ProductModel
    {
        public string ProductName { get; set; }
    }

}
